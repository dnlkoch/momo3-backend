<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- (Optionally) define a prefix for table names -->
    <bean id="tablePrefix" class="java.lang.String">
        <constructor-arg value="${ddl.tablePrefix}" />
    </bean>
    
    <!-- HIKARI CP config-->
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
         <property name="connectionTestQuery" value="${hikari.testQuery}" />
         <property name="maximumPoolSize" value="${hikari.maximumPoolSize}" />
         <property name="dataSourceClassName" value="${hikari.pg.dataSourceClassName}"/>
         <property name="dataSourceProperties">
             <props>
                 <prop key="url">${jdbc.url}</prop>
                 <prop key="user">${jdbc.username}</prop>
                 <prop key="password">${jdbc.password}</prop>
             </props>
         </property>
     </bean>

    <!-- Using hikari connection pooling. See http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html#jdbc-datasource -->
    <bean id="shogun2DataSource" class="com.zaxxer.hikari.HikariDataSource"
        destroy-method="close">
        <constructor-arg ref="hikariConfig"/>
    </bean>

    <!-- HIKARI CP config -->
<!--     <bean id="geoserverHikariConfig" class="com.zaxxer.hikari.HikariConfig"> -->
<!--          <property name="connectionTestQuery" value="${hikari.testQuery}" /> -->
<!--          <property name="maximumPoolSize" value="${hikari.maximumPoolSize}" /> -->
<!--          <property name="dataSourceClassName" value="${hikari.pg.dataSourceClassName}"/> -->
<!--          <property name="dataSourceProperties"> -->
<!--              <props> -->
<!--                  <prop key="url">${jdbc.geoserver.url}</prop> -->
<!--                  <prop key="user">${jdbc.geoserver.username}</prop> -->
<!--                  <prop key="password">${jdbc.geoserver.password}</prop> -->
<!--              </props> -->
<!--          </property> -->
<!--      </bean> -->

    <!-- Using hikari connection pooling. See http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html#jdbc-datasource -->
    <bean id="geoserverDataSource" class="com.zaxxer.hikari.HikariDataSource"
        destroy-method="close">
<!--         <constructor-arg ref="geoserverHikariConfig"/> -->
        <constructor-arg ref="hikariConfig"/>
    </bean>

    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="shogun2DataSource" />
        <property name="packagesToScan" value="de.terrestris.*.model" />
        <property name="implicitNamingStrategy">
            <bean class="de.terrestris.shogun2.util.naming.ImplicitNamingStrategyShogun2" />
        </property>
        <property name="physicalNamingStrategy">
            <bean class="de.terrestris.shogun2.util.naming.PhysicalNamingStrategyShogun2" />
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.id.new_generator_mappings">${hibernate.id.new_generator_mappings}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            </props>
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />

    <bean id="transactionManager"
        class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

</beans>
